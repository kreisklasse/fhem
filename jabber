# Jabber auf RaspberryPi und fhem installieren
#
# Lokaler Jabber Server ohne Verbindung zu anderen Jabber Servern !
# Dynamic DNS sollte angelegt sein, meine Empfehlung https://desec.io/
#
# https://jankarres.de/2015/08/raspberry-pi-xmpp-server-prosody-installieren/
# https://samhobbs.co.uk/2016/09/installing-prosody-instant-message-chat-server-raspberry-pi-ubuntu
# https://wiki.fhem.de/wiki/Prosody
#
# Befehle:
# sudo prosodyctl restart
#
# um via telnet prosody zu administrieren:
# sudo apt-get install telnetd telnet
# dann:
# telnet localhost 5582
#
#
# Portweiterleitung in Fritzbox : 5222 (client2server)
# Port 5269 für server2server communication nicht freigegeben
#
# Logfile:   /var/log/prosody/prosody.log
# Errorlog:  /var/log/prosody/prosody.err
#
#
sudo apt-get install -y lsb-release

echo deb http://packages.prosody.im/debian $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list

wget https://prosody.im/files/prosody-debian-packages.key -O- | sudo apt-key add -

sudo apt-get update

sudo apt-get install lua-bitop
sudo apt-get install prosody-0.10
sudo su
cd /etc/prosody/certs/
openssl genrsa -out prosody.key 4096     # ohne "sudo", sonst kann prosody nicht auf die Certificate zugreifen
openssl req -new -sha256 -key prosody.key -out prosody.csr
openssl x509 -req -sha256 -days 3650 -in prosody.csr -signkey prosody.key -out prosody.crt
exit

# zusätzliche Prosody Module installieren
# https://samhobbs.co.uk/2016/09/extra-modules-prosody-instant-message-chat-server-raspberry-pi-ubuntu
# https://jacksonjs.github.io/2016/09/09/prosodyonpi/
# https://blog.doenselmann.com/jabberxmpp-server-auf-raspberry-pi-installieren/

sudo apt-get install mercurial
cd /opt
sudo hg clone https://hg.prosody.im/prosody-modules/ prosody-modules

# da kein autoupdate, deshalb von Zeit zu Zeit folgendes ausführen:
#       cd /opt/prosody-modules/
#       sudo hg update
#	sudo hg pull

# Prosody Configuration anpassen

sudo nano /etc/prosody/prosody.cfg.lua

# Prosody Config File ANFANG

-- Prosody XMPP Server Configuration
--
-- Information on configuring Prosody can be found on our
-- website at http://prosody.im/doc/configure
--
-- Tip: You can check that the syntax of this file is correct
-- when you have finished by running: prosodyctl check config
-- If there are any errors, it will let you know what and where
-- they are, otherwise it will keep quiet.
--
-- Good luck, and happy Jabbering!


---------- Server-wide settings ----------
-- Settings in this section apply to the whole server and are the default settings
-- for any virtual hosts

-- This is a (by default, empty) list of accounts that are admins
-- for the server. Note that you must create the accounts separately
-- (see http://prosody.im/doc/creating_accounts for info)
-- Example: admins = { "user1@example.com", "user2@example.net" }
admins = { "admin@test.net" }  -- DEINE PERSÖNLICHE EMAIL

-- Enable use of libevent for better performance under high load
-- For more information see: http://prosody.im/doc/libevent
--use_libevent = true

-- This is the list of modules Prosody will load on startup.
-- It looks for mod_modulename.lua in the plugins folder, so make sure that exists too.
-- Documentation on modules can be found at: http://prosody.im/doc/modules
plugin_paths = { "/opt/prosody-modules" }  --  PLUGIN PATH HINZUFÜGEN
modules_enabled = {

        -- Generally required
                "roster"; -- Allow users to have a roster. Recommended ;)
                "saslauth"; -- Authentication for clients and servers. Recommended if you want to log in.
                "tls"; -- Add support for secure TLS on c2s/s2s connections
                "dialback"; -- s2s dialback support
                "disco"; -- Service discovery

        -- Not essential, but recommended
                "private"; -- Private XML storage (for room bookmarks, etc.)
                "vcard"; -- Allow users to set vCards

      -- These are commented by default as they have a performance impact
                --"blocklist"; -- Allow users to block communications with other users
                --"compression"; -- Stream compression (requires the lua-zlib package installed)

        -- Nice to have
                "version"; -- Replies to server version requests
                "uptime"; -- Report how long server has been running
                "time"; -- Let others know the time here on this server
                "ping"; -- Replies to XMPP pings with pongs
                "pep"; -- Enables users to publish their mood, activity, playing music and more
                "register"; -- Allow users to register on this server using a client and change passwords

        -- Admin interfaces
                "admin_adhoc"; -- Allows administration via an XMPP client that supports ad-hoc commands
                "admin_telnet"; -- Opens telnet console interface on localhost port 5582.   TELNET FREIGEBEN FALS GEWÜNSCHT

        -- HTTP modules
                --"bosh"; -- Enable BOSH clients, aka "Jabber over HTTP"
                --"http_files"; -- Serve static files from a directory over HTTP
      -- Other specific functionality
                --"groups"; -- Shared roster support
                --"announce"; -- Send announcement to all online users
                --"welcome"; -- Welcome users who register accounts
                --"watchregistrations"; -- Alert admins of registrations
                --"motd"; -- Send a message to users when they log in
                --"legacyauth"; -- Legacy authentication. Only used by some old clients and bots.

        -- Extra Module zB aus opt/modules HIER DIE EXTRA MODULE HINZUFÜGEN
                "carbons";
                "mam"; -- Message Archive Management
                "mam_archive";
                "smacks"; -- stream management
                "csi"; -- client state indication
                "throttle_presence"; -- presence throttling in CSI
                "filter_chatstates"; -- disable "X is typing" type messages
                "http";
                "http_upload";
}

-- These modules are auto-loaded, but should you want
-- to disable them then uncomment them here:
modules_disabled = {
        -- "offline"; -- Store offline messages
        -- "c2s"; -- Handle client connections
        "s2s"; -- Handle server-to-server connections  DISABLED DA NUR PRIVATER JABBER SERVER
        -- "posix"; -- POSIX functionality, sends server to background, enables syslog, etc.
}

-- Disable account creation by default, for security
-- For more information see http://prosody.im/doc/creating_accounts
-- These are the SSL/TLS-related settings. If you don't want
-- to use SSL/TLS, you may comment or remove this
-- PFAD ZU EIGENEN ZERTIFIKATEN ANGEBEN
ssl = {
        key = "/etc/prosody/certs/localhost.key";
        certificate = "/etc/prosody/certs/localhost.crt";
}

-- Force clients to use encrypted connections? This option will
-- prevent clients from authenticating unless they are using encryption.

c2s_require_encryption = true

-- Force certificate authentication for server-to-server connections?
-- This provides ideal security, but requires servers you communicate
-- with to support encryption AND present valid, trusted certificates.
-- NOTE: Your version of LuaSec must support certificate verification!
-- For more information see http://prosody.im/doc/s2s#security

s2s_secure_auth = false
-- Many servers don't support encryption or have invalid or self-signed
-- certificates. You can list domains here that will not be required to
-- authenticate using certificates. They will be authenticated using DNS.

--s2s_insecure_domains = { "gmail.com" }

-- Even if you leave s2s_secure_auth disabled, you can still require valid
-- certificates for some domains by specifying a list here.

--s2s_secure_domains = { "jabber.org" }

-- Required for init scripts and prosodyctl
pidfile = "/var/run/prosody/prosody.pid"

-- Select the authentication backend to use. The 'internal' providers
-- use Prosody's configured data storage to store the authentication data.
-- To allow Prosody to offer secure authentication mechanisms to clients, the
-- default provider stores passwords in plaintext. If you do not trust your
-- server please see http://prosody.im/doc/modules/mod_auth_internal_hashed
-- for information about using the hashed backend.

-- PASSWÖRTER HASHED ABLEGEN
authentication = "internal_hashed"

-- Select the storage backend to use. By default Prosody uses flat files
-- in its configured data directory, but it also supports more backends
-- through modules. An "sql" backend is included by default, but requires
-- additional dependencies. See http://prosody.im/doc/storage for more info.

--storage = "sql" -- Default is "internal"

-- For the "sql" backend, you can uncomment *one* of the below to configure:
--sql = { driver = "SQLite3", database = "prosody.sqlite" } -- Default. 'database' is the filename.
--sql = { driver = "MySQL", database = "prosody", username = "prosody", password = "secret", host = "localhost" }
--sql = { driver = "PostgreSQL", database = "prosody", username = "prosody", password = "secret", host = "localhost" }

-- Logging configuration
-- For advanced logging see http://prosody.im/doc/logging
-- INFO LOGGING VERBOTEN
log = {
        -- info = "/var/log/prosody/prosody.log"; -- Change 'info' to 'debug' for verbose logging
        error = "/var/log/prosody/prosody.err";
        "*syslog";
}

----------- Virtual hosts -----------
-- You need to add a VirtualHost entry for each domain you wish Prosody to serve.
-- Settings under each VirtualHost entry apply *only* to that host.

VirtualHost "localhost"

VirtualHost "MEINJABBERSERVER.dedyn.io"  -- EIGENE SERVER DYNAMIC IP ADDRESE EINGEBEN
--      enabled = false -- Remove this line to enable this host

        -- Assign this host a certificate for TLS, otherwise it would use the one
        -- set in the global section (if any).
        -- Note that old-style SSL on port 5223 only supports one certificate, and will always
        -- use the global one.
-- EIGENE PFAND ZU SSL ZERTIFIKATEN ANGEBEN
        ssl = {
key = "/etc/prosody/certs/prosody.key";
                certificate = "/etc/prosody/certs/prosody.crt";
        }

------ Components ------
-- You can specify components to add hosts that provide special services,
-- like multi-user conferences, and transports.
-- For more information on components, see http://prosody.im/doc/components

---Set up a MUC (multi-user chat) room server on conference.example.com:
--Component "conference.example.com" "muc"

-- Set up a SOCKS5 bytestream proxy for server-proxied file transfers:
--Component "proxy.example.com" "proxy65"
---Set up an external component (default component port is 5347)
--
-- External components allow adding various services, such as gateways/
-- transports to other networks like ICQ, MSN and Yahoo. For more info
-- see: http://prosody.im/doc/components#adding_an_external_component
--
--Component "gateway.example.com"
--      component_secret = "password"


# Prosody Config File ENDE


sudo prosodyctl restart

# Nutzerkonten auf Jabber Server erstellen, mindestens 2 --> 1. fhem, 2. Pad/Phone
sudo prosodyctl register NUTZERNAME1 MEINJABBERSERVER.dedyn.io PASSWORT1
sudo prosodyctl register NUTZERNAME2 MEINJABBERSERVER.dedyn.io PASSWORT2

#
# Jabber Server in fhem einfügen
#
# http://fhem.de/commandref_DE.html#Jabber
# http://www.fhemwiki.de/wiki/FHEM_spricht_jabber
# http://blog.wenzlaff.de/?p=3202

sudo apt-get install libnet-jabber-perl libnet-xmpp-perl libxml-stream-perl libauthen-sasl-perl libnet-ssleay-perl libnet-jabber-bot-perl libdigest-sha-perl

# im fhem
# 127.0.0.1 wenn Prosody und fhem und zusätzlich pihole auf einem RasPi
define jabber Jabber 127.0.0.1 5222 NUTZERNAME1 PASSWORT1
attr jabber JabberDomain MEINJABBERSERVER.dedyn.io
attr jabber RecvWhitelist NUTZERNAME2@hMEINJABBERSERVER.dedyn.io

# um mit Jabber fhem-Daten abzurufen, siehe 99_myUtils unten
define n_Jabber_Answer notify jabber:Message.* {sendJabberAnswer();;}

# jeden Tag um 09:30 Uhr fhem Statusnachricht senden, siehe 99_myUtils unten 
define at_jabbersendsstatus at *09:30:00 {sendMeStatusMsg();;}

# sendet automatisch Nachricht nachdem fhem neu gestarted wurde
define n_jabber_fhem_restart notify global:INITIALIZED set jabber msg NUTZERNAME2@hMEINJABBERSERVER.dedyn.io fhem wurde neu gestartet


# 99_myUtils anlegen
# http://www.fhemwiki.de/wiki/99_myUtils_anlegen
#



##############################################
# $Id: myUtilsTemplate.pm 7570 2015-01-14 18:31:44Z rudolfkoenig $
#
# Save this file as 99_myUtils.pm, and create your own functions in the new
# file. They are then available in every Perl expression.

package main;

use strict;
use warnings;
use POSIX;

sub
myUtils_Initialize($$)
{
  my ($hash) = @_;
}

# Enter you functions below _this_ line.

######################################################
# Meldung per Jabber senden
######################################################
sub
sendJabberMessage($$)
{
  my($rcp, $msg) = @_;
  fhem("set jabber msg $rcp $msg");
}

######################################################
# Meldung an mich per Jabber senden
######################################################
sub
sendMeJabberMessage($)
{
	my($msg) = @_;
	sendJabberMessage('NUTZERNAME2@MEINJABBERSERVER.dedyn.io', $msg);
}

######################################################
# Statusdaten an mein Handy per Jabber senden
######################################################
sub
sendMeStatusMsg()
{
  # Hier ist der Text fuer die Statusmeldung. Z.B. Werte von Sensoren.
my $msg = "Status: Wohnung";
$msg=$msg."\n  TV: ";
$msg=$msg."\n T: ".ReadingsVal("FBDECT_Fritzbox_16", "temp_user", "---")." °C | ";
$msg=$msg."P: ".ReadingsVal("FBDECT_Fritzbox_16", "power", "---")." | ";
$msg=$msg."S: ".ReadingsVal("FBDECT_Fritzbox_16", "state", "---")." ";
$msg=$msg."\n\n  Office L-M: ";
$msg=$msg."\n T: ".ReadingsVal("FBDECT_Fritzbox_19", "temp_user", "---")." °C | ";
$msg=$msg."P: ".ReadingsVal("FBDECT_Fritzbox_19", "power", "---")." | ";
$msg=$msg."S: ".ReadingsVal("FBDECT_Fritzbox_19", "state", "---")." ";
$msg=$msg."\n T: ".ReadingsVal("FBDECT_Fritzbox_17", "temp_user", "---")." °C | ";
$msg=$msg."P: ".ReadingsVal("FBDECT_Fritzbox_17", "power", "---")." | ";
$msg=$msg."S: ".ReadingsVal("FBDECT_Fritzbox_17", "state", "---")." ";
$msg=$msg."\n\n  Schlafzimmer: ";
$msg=$msg."\n T: ".ReadingsVal("FBDECT_Fritzbox_18", "temp_user", "---")." °C | ";
$msg=$msg."P: ".ReadingsVal("FBDECT_Fritzbox_18", "power", "---")." | ";
$msg=$msg."S: ".ReadingsVal("FBDECT_Fritzbox_18", "state", "---")." ";
$msg=$msg."\n\n  Küche: ";
$msg=$msg."\n P: ".ReadingsVal("ZWave_SWITCH_BINARY_4", "power", "---")." | ";
$msg=$msg."S: ".ReadingsVal("ZWave_SWITCH_BINARY_4", "state", "---")." ";
$msg=$msg."\n T: ".ReadingsVal("FBDECT_Fritzbox_23", "temp_user", "---")." °C | ";
$msg=$msg."P: ".ReadingsVal("FBDECT_Fritzbox_23", "power", "---")." | ";
$msg=$msg."S: ".ReadingsVal("FBDECT_Fritzbox_23", "state", "---")." ";
$msg=$msg."\n\n  Auge: ";
$msg=$msg."\n T: ".ReadingsVal("ZWave_SENSOR_NOTIFICATION_5", "temperature", "---")." | ";
$msg=$msg."Batt.: ".ReadingsVal("ZWave_SENSOR_NOTIFICATION_5", "battery", "---")." ";
$msg=$msg."\n\n  Raspi: ";
$msg=$msg."\n CPU: ".ReadingsVal("PiMonitor", "cpu_temp_avg", "---")." °C";



	sendMeJabberMessage($msg);
}

######################################################
# Kleines Jabber-Cmd-Interface
######################################################
sub
sendJabberAnswer()
{
  my $lastsender=ReadingsVal("jabber","LastSenderJID","0");
  my $lastmsg=ReadingsVal("jabber","LastMessage","0");
  my @cmd_list = split(/\s+/, trim($lastmsg));
  my $cmd = lc($cmd_list[0]);
  # erstes Element entfernen
  shift(@cmd_list);
  
  my $newmsg;
  # Hier den Status ausgeben: Z.B. Anwesenheit, Fenster, Telefonanrufe,...
  if($cmd eq "status") {
  	$newmsg.= "Status:";
$newmsg.="\n  TV: ";
$newmsg.="\n T: ".ReadingsVal("FBDECT_Fritzbox_16", "temp_user", "---")." °C | ";
$newmsg.="P: ".ReadingsVal("FBDECT_Fritzbox_16", "power", "---")." | ";
$newmsg.="S: ".ReadingsVal("FBDECT_Fritzbox_16", "state", "---")." ";
$newmsg.="\n\n  Office L-M: ";
$newmsg.="\n T: ".ReadingsVal("FBDECT_Fritzbox_19", "temp_user", "---")." °C | ";
$newmsg.="P: ".ReadingsVal("FBDECT_Fritzbox_19", "power", "---")." | ";
$newmsg.="S: ".ReadingsVal("FBDECT_Fritzbox_19", "state", "---")." ";
$newmsg.="\n T: ".ReadingsVal("FBDECT_Fritzbox_17", "temp_user", "---")." °C | ";
$newmsg.="P: ".ReadingsVal("FBDECT_Fritzbox_17", "power", "---")." | ";
$newmsg.="S: ".ReadingsVal("FBDECT_Fritzbox_17", "state", "---")." ";
$newmsg.="\n\n  Schlafzimmer: ";
$newmsg.="\n T: ".ReadingsVal("FBDECT_Fritzbox_18", "temp_user", "---")." °C | ";
$newmsg.="P: ".ReadingsVal("FBDECT_Fritzbox_18", "power", "---")." | ";
$newmsg.="S: ".ReadingsVal("FBDECT_Fritzbox_18", "state", "---")." ";
$newmsg.="\n\n  Küche: ";
$newmsg.="\n P: ".ReadingsVal("ZWave_SWITCH_BINARY_4", "power", "---")." | ";
$newmsg.="S: ".ReadingsVal("ZWave_SWITCH_BINARY_4", "reportedState", "---")." ";
$newmsg.="\n T: ".ReadingsVal("FBDECT_Fritzbox_23", "temp_user", "---")." °C | ";
$newmsg.="P: ".ReadingsVal("FBDECT_Fritzbox_23", "power", "---")." | ";
$newmsg.="S: ".ReadingsVal("FBDECT_Fritzbox_23", "state", "---")." ";
$newmsg.="\n\n  Auge: ";
$newmsg.="\n T: ".ReadingsVal("ZWave_SENSOR_NOTIFICATION_5", "temperature", "---")." | ";
$newmsg.="Batt.: ".ReadingsVal("ZWave_SENSOR_NOTIFICATION_5", "battery", "---")." ";
$newmsg.="\n\n  Raspi: ";
$newmsg.="\n CPU: ".ReadingsVal("PiMonitor", "cpu_temp_avg", "---")." °C";
$newmsg.="\n\n  Lampen: ";
$newmsg.="\n Wohnzimmer: ".ReadingsVal("HUEDevice1", "state", "---")." ";
$newmsg.="\n Schreibtisch: ".ReadingsVal("HUEDevice2", "state", "---")." ";
$newmsg.="\n Eingang: ".ReadingsVal("HUEDevice3", "state", "---")." ";
  }
  
  # Ausssentemperatur etc. melden
  if($cmd eq "umwelt") {
    $newmsg.= "Umwelt";
    $newmsg.="\n  Vorgarten: ";
    $newmsg.="T: ".ReadingsVal("Sensor3", "temperature", "---")." C, ";
    $newmsg.="B: ".ReadingsVal("Sensor3", "brightness", "---").", ";
    $newmsg.="Bat: ".ReadingsVal("Sensor3", "battery", "---")." ";
    $newmsg.="\n  Garten: ";
    $newmsg.="T: ".ReadingsVal("Sensor2", "temperature", "---")." C,"; 
    $newmsg.=" H: ".ReadingsVal("Sensor2", "humidity", "---")." %,";  
    $newmsg.=" Bat: ".ReadingsVal("Sensor2", "battery", "---")." V";
  }
  
# Systemueberwachung durch SYSMON
  if($cmd eq "raspi") {
   $newmsg.= "CPU Temp: ".ReadingsVal("PiMonitor", "cpu_temp_avg", "---")." C\n";
   $newmsg.= "loadavg: ".ReadingsVal("PiMonitor", "loadavg", "---")."\n";
   $newmsg.= "Auslastung: ".ReadingsVal("PiMonitor", "stat_cpu_text", "---")."\n";
   $newmsg.= "RAM: ".ReadingsVal("PiMonitor", "ram", "---")."\n";
   $newmsg.= "Uptime: ".ReadingsVal("PiMonitor", "uptime_text", "---")."\n";
   $newmsg.= "FHEM uptime: ".ReadingsVal("PiMonitor", "fhemuptime_text", "---")."\n";
  }
  # ggf. weitere Befehle
  
  # kleine Hilfe zu den verfuegbaren Anweisungen
  if($cmd eq "help" || $cmd eq "hilfe" || $cmd eq "?") {
  	$newmsg.= "Befehle: Help (Hilfe), raspi, Status, Licht";
$newmsg.= "\n Licht : Schreibtischlampe ein";
	$newmsg.= "\n\n Licht Scene: \n fhem set LS_Abend scene TV_Normal";
  }

# HUE-Licht einschalten
# HUE Schreibtisch Ein
if($cmd eq "licht") 
 		{
		fhem("set HUEDevice2 on");
		}
  
  # FHEM-Anweisungen ausfuehren (als ob diese auf der Console eingegben wurden)
  if($cmd eq "fhem") {
    my $cmd_tail = join(" ",@cmd_list);
    $newmsg.=fhem($cmd_tail);
  }

  # Perl-Befehle ausfuehren  
  if($cmd eq "perl") {
    my $cmd_tail = join(" ",@cmd_list);
    $newmsg.=eval($cmd_tail);
  }

   
  if(defined($newmsg)) {
    fhem("set jabber msg ". $lastsender . " ".$newmsg);
  } else {
  	fhem("set jabber msg ". $lastsender . " Unbekanter Befehl: ".$lastmsg);
  }
}

#### Ende Jabber

1;


